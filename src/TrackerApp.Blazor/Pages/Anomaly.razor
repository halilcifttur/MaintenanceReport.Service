@page "/anomaly"
@using Volo.Abp.Application.Dtos
@using Microsoft.Extensions.Localization
@using TrackerApp.Localization
@using TrackerApp.Dtos;
@inject AbpBlazorMessageLocalizerHelper<TrackerAppResource> LH
@inject IStringLocalizer<TrackerAppResource> L
@inherits AbpCrudPageBase<IAnomalyAppService, AnomalyDto, Guid, PagedAnomalyDto, CreateAnomalyDto, UpdateAnomalyDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Anomalys"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">
                    @L["NewAnomaly"]
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="AnomalyDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="AnomalyDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="AnomalyDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="AnomalyDto"
                                          Text="@L["Edit"]"
                                          Clicked="() => OpenEditModalAsync(context)"/>
                            <EntityAction TItem="AnomalyDto"
                                          Text="@L["Delete"]"
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)"/>
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="AnomalyDto"
                                Field="@nameof(AnomalyDto.MaterialId)"
                                Caption="@L["MaterialId"]">
                </DataGridColumn>
                <DataGridColumn TItem="AnomalyDto"
                                Field="@nameof(AnomalyDto.Action)"
                                Caption="@L["Action"]">
                </DataGridColumn>
                <DataGridColumn TItem="AnomalyDto"
                                Field="@nameof(AnomalyDto.Cause)"
                                Caption="@L["Cause"]">
                </DataGridColumn>
                <DataGridColumn TItem="AnomalyDto"
                                Field="@nameof(AnomalyDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                </DataGridColumn>
                <DataGridColumn TItem="AnomalyDto"
                                Field="@nameof(AnomalyDto.CreatorId)"
                                Caption="@L["CreatorId"]">
                </DataGridColumn>
                <DataGridColumn TItem="AnomalyDto"
                                Field="@nameof(AnomalyDto.MaintenanceStartDate)"
                                Caption="@L["MaintenanceStartDate"]">
                </DataGridColumn>
                <DataGridColumn TItem="AnomalyDto"
                                Field="@nameof(AnomalyDto.MaintenanceEndDate)"
                                Caption="@L["MaintenanceEndDate"]">
                </DataGridColumn>
                <DataGridColumn TItem="AnomalyDto"
                                Field="@nameof(AnomalyDto.AnomalyStartDate)"
                                Caption="@L["AnomalyStartDate"]">
                </DataGridColumn>
                <DataGridColumn TItem="AnomalyDto"
                                Field="@nameof(AnomalyDto.AnomalyEndDate)"
                                Caption="@L["AnomalyEndDate"]">
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="@CreateModal">
    <ModalBackdrop/>
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewMaterial"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Type"]</FieldLabel>
                            <Select TValue="Guid?" @bind-SelectedValue="@NewEntity.MaterialId">
                                <SelectItem TValue="Guid" Value="Guid.Empty">@L["PickMaterial"]</SelectItem>
                                @foreach (var material in _materials)
                                {
                                    <SelectItem TValue="Guid" Value="@(material.Id)">
                                        @(material.Name)
                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                        <Field>
                            <FieldLabel>@L["Cause"]</FieldLabel>
                            <MemoEdit @bind-Text="@NewEntity.Cause">
                            </MemoEdit>
                        </Field>
                        <Field>
                            <FieldLabel>@L["AnomalyStartDate"]</FieldLabel>
                            <DatePicker TValue="DateTime?" InputMode="DateInputMode.DateTime" @bind-Date="NewEntity.AnomalyStartDate"/>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="@EditModal">
    <ModalBackdrop/>
    <ModalContent Size="ModalSize.Large" IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle> </ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">

                        <Field>
                            <FieldLabel>@L["Action"]</FieldLabel>
                            <MemoEdit @bind-Text="@EditingEntity.Action">
                            </MemoEdit>
                        </Field>
                        <Field>
                            <FieldLabel>@L["MaintenanceStartDate"]</FieldLabel>
                            <DateEdit TValue="DateTime?" @bind-Date="EditingEntity.MaintenanceStartDate"/>
                        </Field>
                        <Field>
                            <FieldLabel>@L["Status"]</FieldLabel>
                            <Select TValue="EnumStatus" @bind-SelectedValue="@EditingEntity.Status">
                                @foreach (int type in Enum.GetValues(typeof(EnumStatus)))
                                {
                                    <SelectItem TValue="EnumStatus" Value="@((EnumStatus) type)">
                                        @(Enum.GetName(typeof(EnumStatus), type))
                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                        @if (EditingEntity.Status == EnumStatus.Done)
                        {
                            <Field>
                                <FieldLabel>@L["MaintenanceEndDate"]</FieldLabel>
                                <DatePicker TValue="DateTime?" InputMode="DateInputMode.DateTime" @bind-Date="EditingEntity.MaintenanceEndDate"/>
                            </Field>
                        }
                        
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>